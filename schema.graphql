schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

# expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

# expression to compare columns of type Int. All fields are combined with logical 'AND'.
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

# mutation root
type mutation_root {
  # delete data from the table: "todo_app.todos"
  delete_todo_app_todos(
    # filter the rows which have to be deleted
    where: todo_app_todos_bool_exp!
  ): todo_app_todos_mutation_response

  # delete single row from the table: "todo_app.todos"
  delete_todo_app_todos_by_pk(id: Int!): todo_app_todos

  # delete data from the table: "todo_app.users"
  delete_todo_app_users(
    # filter the rows which have to be deleted
    where: todo_app_users_bool_exp!
  ): todo_app_users_mutation_response

  # delete single row from the table: "todo_app.users"
  delete_todo_app_users_by_pk(id: Int!): todo_app_users

  # insert data into the table: "todo_app.todos"
  insert_todo_app_todos(
    # the rows to be inserted
    objects: [todo_app_todos_insert_input!]!

    # on conflict condition
    on_conflict: todo_app_todos_on_conflict
  ): todo_app_todos_mutation_response

  # insert a single row into the table: "todo_app.todos"
  insert_todo_app_todos_one(
    # the row to be inserted
    object: todo_app_todos_insert_input!

    # on conflict condition
    on_conflict: todo_app_todos_on_conflict
  ): todo_app_todos

  # insert data into the table: "todo_app.users"
  insert_todo_app_users(
    # the rows to be inserted
    objects: [todo_app_users_insert_input!]!

    # on conflict condition
    on_conflict: todo_app_users_on_conflict
  ): todo_app_users_mutation_response

  # insert a single row into the table: "todo_app.users"
  insert_todo_app_users_one(
    # the row to be inserted
    object: todo_app_users_insert_input!

    # on conflict condition
    on_conflict: todo_app_users_on_conflict
  ): todo_app_users

  # update data of the table: "todo_app.todos"
  update_todo_app_todos(
    # increments the integer columns with given value of the filtered values
    _inc: todo_app_todos_inc_input

    # sets the columns of the filtered rows to the given values
    _set: todo_app_todos_set_input

    # filter the rows which have to be updated
    where: todo_app_todos_bool_exp!
  ): todo_app_todos_mutation_response

  # update single row of the table: "todo_app.todos"
  update_todo_app_todos_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: todo_app_todos_inc_input

    # sets the columns of the filtered rows to the given values
    _set: todo_app_todos_set_input
    pk_columns: todo_app_todos_pk_columns_input!
  ): todo_app_todos

  # update data of the table: "todo_app.users"
  update_todo_app_users(
    # increments the integer columns with given value of the filtered values
    _inc: todo_app_users_inc_input

    # sets the columns of the filtered rows to the given values
    _set: todo_app_users_set_input

    # filter the rows which have to be updated
    where: todo_app_users_bool_exp!
  ): todo_app_users_mutation_response

  # update single row of the table: "todo_app.users"
  update_todo_app_users_by_pk(
    # increments the integer columns with given value of the filtered values
    _inc: todo_app_users_inc_input

    # sets the columns of the filtered rows to the given values
    _set: todo_app_users_set_input
    pk_columns: todo_app_users_pk_columns_input!
  ): todo_app_users
}

# An object with globally unique ID
interface Node {
  # A globally unique identifier
  id: ID!
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

# query root
type query_root {
  node(
    # A globally unique id
    id: ID!
  ): Node

  # fetch data from the table: "todo_app.todos"
  todo_app_todos_connection(
    after: String
    before: String

    # distinct select on columns
    distinct_on: [todo_app_todos_select_column!]
    first: Int
    last: Int

    # sort the rows by one or more columns
    order_by: [todo_app_todos_order_by!]

    # filter the rows returned
    where: todo_app_todos_bool_exp
  ): todo_app_todosConnection!

  # fetch data from the table: "todo_app.users"
  todo_app_users_connection(
    after: String
    before: String

    # distinct select on columns
    distinct_on: [todo_app_users_select_column!]
    first: Int
    last: Int

    # sort the rows by one or more columns
    order_by: [todo_app_users_order_by!]

    # filter the rows returned
    where: todo_app_users_bool_exp
  ): todo_app_usersConnection!
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# subscription root
type subscription_root {
  node(
    # A globally unique id
    id: ID!
  ): Node

  # fetch data from the table: "todo_app.todos"
  todo_app_todos_connection(
    after: String
    before: String

    # distinct select on columns
    distinct_on: [todo_app_todos_select_column!]
    first: Int
    last: Int

    # sort the rows by one or more columns
    order_by: [todo_app_todos_order_by!]

    # filter the rows returned
    where: todo_app_todos_bool_exp
  ): todo_app_todosConnection!

  # fetch data from the table: "todo_app.users"
  todo_app_users_connection(
    after: String
    before: String

    # distinct select on columns
    distinct_on: [todo_app_users_select_column!]
    first: Int
    last: Int

    # sort the rows by one or more columns
    order_by: [todo_app_users_order_by!]

    # filter the rows returned
    where: todo_app_users_bool_exp
  ): todo_app_usersConnection!
}

# columns and relationships of "todo_app.todos"
type todo_app_todos implements Node {
  complete: Boolean!
  id: ID!
  text: String!

  # An object relationship
  user: todo_app_users!
  user_id: Int!
}

# aggregated selection of "todo_app.todos"
type todo_app_todos_aggregate {
  aggregate: todo_app_todos_aggregate_fields
  nodes: [todo_app_todos!]!
}

# aggregate fields of "todo_app.todos"
type todo_app_todos_aggregate_fields {
  avg: todo_app_todos_avg_fields
  count(columns: [todo_app_todos_select_column!], distinct: Boolean): Int
  max: todo_app_todos_max_fields
  min: todo_app_todos_min_fields
  stddev: todo_app_todos_stddev_fields
  stddev_pop: todo_app_todos_stddev_pop_fields
  stddev_samp: todo_app_todos_stddev_samp_fields
  sum: todo_app_todos_sum_fields
  var_pop: todo_app_todos_var_pop_fields
  var_samp: todo_app_todos_var_samp_fields
  variance: todo_app_todos_variance_fields
}

# order by aggregate values of table "todo_app.todos"
input todo_app_todos_aggregate_order_by {
  avg: todo_app_todos_avg_order_by
  count: order_by
  max: todo_app_todos_max_order_by
  min: todo_app_todos_min_order_by
  stddev: todo_app_todos_stddev_order_by
  stddev_pop: todo_app_todos_stddev_pop_order_by
  stddev_samp: todo_app_todos_stddev_samp_order_by
  sum: todo_app_todos_sum_order_by
  var_pop: todo_app_todos_var_pop_order_by
  var_samp: todo_app_todos_var_samp_order_by
  variance: todo_app_todos_variance_order_by
}

# input type for inserting array relation for remote table "todo_app.todos"
input todo_app_todos_arr_rel_insert_input {
  data: [todo_app_todos_insert_input!]!
  on_conflict: todo_app_todos_on_conflict
}

# aggregate avg on columns
type todo_app_todos_avg_fields {
  id: Float
  user_id: Float
}

# order by avg() on columns of table "todo_app.todos"
input todo_app_todos_avg_order_by {
  id: order_by
  user_id: order_by
}

# Boolean expression to filter rows from the table "todo_app.todos". All fields are combined with a logical 'AND'.
input todo_app_todos_bool_exp {
  _and: [todo_app_todos_bool_exp]
  _not: todo_app_todos_bool_exp
  _or: [todo_app_todos_bool_exp]
  complete: Boolean_comparison_exp
  id: Int_comparison_exp
  text: String_comparison_exp
  user: todo_app_users_bool_exp
  user_id: Int_comparison_exp
}

# unique or primary key constraints on table "todo_app.todos"
enum todo_app_todos_constraint {
  # unique or primary key constraint
  todos_pkey
}

# input type for incrementing integer column in table "todo_app.todos"
input todo_app_todos_inc_input {
  id: Int
  user_id: Int
}

# input type for inserting data into table "todo_app.todos"
input todo_app_todos_insert_input {
  complete: Boolean
  id: Int
  text: String
  user: todo_app_users_obj_rel_insert_input
  user_id: Int
}

# aggregate max on columns
type todo_app_todos_max_fields {
  id: Int
  text: String
  user_id: Int
}

# order by max() on columns of table "todo_app.todos"
input todo_app_todos_max_order_by {
  id: order_by
  text: order_by
  user_id: order_by
}

# aggregate min on columns
type todo_app_todos_min_fields {
  id: Int
  text: String
  user_id: Int
}

# order by min() on columns of table "todo_app.todos"
input todo_app_todos_min_order_by {
  id: order_by
  text: order_by
  user_id: order_by
}

# response of any mutation on the table "todo_app.todos"
type todo_app_todos_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [todo_app_todos!]!
}

# input type for inserting object relation for remote table "todo_app.todos"
input todo_app_todos_obj_rel_insert_input {
  data: todo_app_todos_insert_input!
  on_conflict: todo_app_todos_on_conflict
}

# on conflict condition type for table "todo_app.todos"
input todo_app_todos_on_conflict {
  constraint: todo_app_todos_constraint!
  update_columns: [todo_app_todos_update_column!]!
  where: todo_app_todos_bool_exp
}

# ordering options when selecting data from "todo_app.todos"
input todo_app_todos_order_by {
  complete: order_by
  id: order_by
  text: order_by
  user: todo_app_users_order_by
  user_id: order_by
}

# primary key columns input for table: "todo_app.todos"
input todo_app_todos_pk_columns_input {
  id: Int!
}

# select columns of table "todo_app.todos"
enum todo_app_todos_select_column {
  # column name
  complete

  # column name
  id

  # column name
  text

  # column name
  user_id
}

# input type for updating data in table "todo_app.todos"
input todo_app_todos_set_input {
  complete: Boolean
  id: Int
  text: String
  user_id: Int
}

# aggregate stddev on columns
type todo_app_todos_stddev_fields {
  id: Float
  user_id: Float
}

# order by stddev() on columns of table "todo_app.todos"
input todo_app_todos_stddev_order_by {
  id: order_by
  user_id: order_by
}

# aggregate stddev_pop on columns
type todo_app_todos_stddev_pop_fields {
  id: Float
  user_id: Float
}

# order by stddev_pop() on columns of table "todo_app.todos"
input todo_app_todos_stddev_pop_order_by {
  id: order_by
  user_id: order_by
}

# aggregate stddev_samp on columns
type todo_app_todos_stddev_samp_fields {
  id: Float
  user_id: Float
}

# order by stddev_samp() on columns of table "todo_app.todos"
input todo_app_todos_stddev_samp_order_by {
  id: order_by
  user_id: order_by
}

# aggregate sum on columns
type todo_app_todos_sum_fields {
  id: Int
  user_id: Int
}

# order by sum() on columns of table "todo_app.todos"
input todo_app_todos_sum_order_by {
  id: order_by
  user_id: order_by
}

# update columns of table "todo_app.todos"
enum todo_app_todos_update_column {
  # column name
  complete

  # column name
  id

  # column name
  text

  # column name
  user_id
}

# aggregate var_pop on columns
type todo_app_todos_var_pop_fields {
  id: Float
  user_id: Float
}

# order by var_pop() on columns of table "todo_app.todos"
input todo_app_todos_var_pop_order_by {
  id: order_by
  user_id: order_by
}

# aggregate var_samp on columns
type todo_app_todos_var_samp_fields {
  id: Float
  user_id: Float
}

# order by var_samp() on columns of table "todo_app.todos"
input todo_app_todos_var_samp_order_by {
  id: order_by
  user_id: order_by
}

# aggregate variance on columns
type todo_app_todos_variance_fields {
  id: Float
  user_id: Float
}

# order by variance() on columns of table "todo_app.todos"
input todo_app_todos_variance_order_by {
  id: order_by
  user_id: order_by
}

# A Relay Connection object on "todo_app.todos"
type todo_app_todosConnection {
  edges: [todo_app_todosEdge!]!
  pageInfo: PageInfo!
}

type todo_app_todosEdge {
  cursor: String!
  node: todo_app_todos!
}

# columns and relationships of "todo_app.users"
type todo_app_users implements Node {
  id: ID!
  name: String!

  # An array relationship
  todos(
    # distinct select on columns
    distinct_on: [todo_app_todos_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [todo_app_todos_order_by!]

    # filter the rows returned
    where: todo_app_todos_bool_exp
  ): [todo_app_todos!]!

  # An aggregated array relationship
  todos_aggregate(
    # distinct select on columns
    distinct_on: [todo_app_todos_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [todo_app_todos_order_by!]

    # filter the rows returned
    where: todo_app_todos_bool_exp
  ): todo_app_todos_aggregate!

  # An array relationship connection
  todos_connection(
    after: String
    before: String

    # distinct select on columns
    distinct_on: [todo_app_todos_select_column!]
    first: Int
    last: Int

    # sort the rows by one or more columns
    order_by: [todo_app_todos_order_by!]

    # filter the rows returned
    where: todo_app_todos_bool_exp
  ): todo_app_todosConnection!
}

# aggregated selection of "todo_app.users"
type todo_app_users_aggregate {
  aggregate: todo_app_users_aggregate_fields
  nodes: [todo_app_users!]!
}

# aggregate fields of "todo_app.users"
type todo_app_users_aggregate_fields {
  avg: todo_app_users_avg_fields
  count(columns: [todo_app_users_select_column!], distinct: Boolean): Int
  max: todo_app_users_max_fields
  min: todo_app_users_min_fields
  stddev: todo_app_users_stddev_fields
  stddev_pop: todo_app_users_stddev_pop_fields
  stddev_samp: todo_app_users_stddev_samp_fields
  sum: todo_app_users_sum_fields
  var_pop: todo_app_users_var_pop_fields
  var_samp: todo_app_users_var_samp_fields
  variance: todo_app_users_variance_fields
}

# order by aggregate values of table "todo_app.users"
input todo_app_users_aggregate_order_by {
  avg: todo_app_users_avg_order_by
  count: order_by
  max: todo_app_users_max_order_by
  min: todo_app_users_min_order_by
  stddev: todo_app_users_stddev_order_by
  stddev_pop: todo_app_users_stddev_pop_order_by
  stddev_samp: todo_app_users_stddev_samp_order_by
  sum: todo_app_users_sum_order_by
  var_pop: todo_app_users_var_pop_order_by
  var_samp: todo_app_users_var_samp_order_by
  variance: todo_app_users_variance_order_by
}

# input type for inserting array relation for remote table "todo_app.users"
input todo_app_users_arr_rel_insert_input {
  data: [todo_app_users_insert_input!]!
  on_conflict: todo_app_users_on_conflict
}

# aggregate avg on columns
type todo_app_users_avg_fields {
  id: Float
}

# order by avg() on columns of table "todo_app.users"
input todo_app_users_avg_order_by {
  id: order_by
}

# Boolean expression to filter rows from the table "todo_app.users". All fields are combined with a logical 'AND'.
input todo_app_users_bool_exp {
  _and: [todo_app_users_bool_exp]
  _not: todo_app_users_bool_exp
  _or: [todo_app_users_bool_exp]
  id: Int_comparison_exp
  name: String_comparison_exp
  todos: todo_app_todos_bool_exp
}

# unique or primary key constraints on table "todo_app.users"
enum todo_app_users_constraint {
  # unique or primary key constraint
  users_pkey
}

# input type for incrementing integer column in table "todo_app.users"
input todo_app_users_inc_input {
  id: Int
}

# input type for inserting data into table "todo_app.users"
input todo_app_users_insert_input {
  id: Int
  name: String
  todos: todo_app_todos_arr_rel_insert_input
}

# aggregate max on columns
type todo_app_users_max_fields {
  id: Int
  name: String
}

# order by max() on columns of table "todo_app.users"
input todo_app_users_max_order_by {
  id: order_by
  name: order_by
}

# aggregate min on columns
type todo_app_users_min_fields {
  id: Int
  name: String
}

# order by min() on columns of table "todo_app.users"
input todo_app_users_min_order_by {
  id: order_by
  name: order_by
}

# response of any mutation on the table "todo_app.users"
type todo_app_users_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [todo_app_users!]!
}

# input type for inserting object relation for remote table "todo_app.users"
input todo_app_users_obj_rel_insert_input {
  data: todo_app_users_insert_input!
  on_conflict: todo_app_users_on_conflict
}

# on conflict condition type for table "todo_app.users"
input todo_app_users_on_conflict {
  constraint: todo_app_users_constraint!
  update_columns: [todo_app_users_update_column!]!
  where: todo_app_users_bool_exp
}

# ordering options when selecting data from "todo_app.users"
input todo_app_users_order_by {
  id: order_by
  name: order_by
  todos_aggregate: todo_app_todos_aggregate_order_by
}

# primary key columns input for table: "todo_app.users"
input todo_app_users_pk_columns_input {
  id: Int!
}

# select columns of table "todo_app.users"
enum todo_app_users_select_column {
  # column name
  id

  # column name
  name
}

# input type for updating data in table "todo_app.users"
input todo_app_users_set_input {
  id: Int
  name: String
}

# aggregate stddev on columns
type todo_app_users_stddev_fields {
  id: Float
}

# order by stddev() on columns of table "todo_app.users"
input todo_app_users_stddev_order_by {
  id: order_by
}

# aggregate stddev_pop on columns
type todo_app_users_stddev_pop_fields {
  id: Float
}

# order by stddev_pop() on columns of table "todo_app.users"
input todo_app_users_stddev_pop_order_by {
  id: order_by
}

# aggregate stddev_samp on columns
type todo_app_users_stddev_samp_fields {
  id: Float
}

# order by stddev_samp() on columns of table "todo_app.users"
input todo_app_users_stddev_samp_order_by {
  id: order_by
}

# aggregate sum on columns
type todo_app_users_sum_fields {
  id: Int
}

# order by sum() on columns of table "todo_app.users"
input todo_app_users_sum_order_by {
  id: order_by
}

# update columns of table "todo_app.users"
enum todo_app_users_update_column {
  # column name
  id

  # column name
  name
}

# aggregate var_pop on columns
type todo_app_users_var_pop_fields {
  id: Float
}

# order by var_pop() on columns of table "todo_app.users"
input todo_app_users_var_pop_order_by {
  id: order_by
}

# aggregate var_samp on columns
type todo_app_users_var_samp_fields {
  id: Float
}

# order by var_samp() on columns of table "todo_app.users"
input todo_app_users_var_samp_order_by {
  id: order_by
}

# aggregate variance on columns
type todo_app_users_variance_fields {
  id: Float
}

# order by variance() on columns of table "todo_app.users"
input todo_app_users_variance_order_by {
  id: order_by
}

# A Relay Connection object on "todo_app.users"
type todo_app_usersConnection {
  edges: [todo_app_usersEdge!]!
  pageInfo: PageInfo!
}

type todo_app_usersEdge {
  cursor: String!
  node: todo_app_users!
}

